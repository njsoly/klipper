[gcode_macro PRIME_NOZZLE]
gcode:
	# these are the priming statements from PrusaSlicer.  Use at own risk.
	G1 Z0.20 F240
	G92 E0
	G1 X2.0 Y140 E10 F1500 ; prime the nozzle
	G1 X2.3 Y140 F5000
	G92 E0
	G1 X2.3 Y10 E10 F1200 ; prime the nozzle
	G92 E0

[gcode_macro START_PRINT]
description: Borrowed from the examples.  Params: BED_TEMP, EXTRUDER_TEMP
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
    # Start bed heating
    M140 S{BED_TEMP}
    # Use absolute coordinates
    G90
    # Reset the G-Code Z offset (adjust Z offset if needed)
    SET_GCODE_OFFSET Z=0.0
    # Home the printer
    G28
    # Move the nozzle near the bed
    G1 Z5 F3000
    # Move the nozzle very close to the bed
    G1 Z0.2 F300
    # Wait for bed to reach temperature
    M190 S{BED_TEMP}
    # Set and wait for nozzle to reach temperature
    M109 S{EXTRUDER_TEMP}
	# Call the PRIME_NOZZLE MACRO if you so dare.
	#PRIME_NOZZLE

[gcode_macro END_PRINT]
gcode:
    # Turn off bed, extruder, and fan
    M140 S0
    M104 S0
    M106 S0
    # Move nozzle away from print while retracting
    G91
    G1 X-2 Y-2 E-3 F300
    # Raise nozzle by 10mm
    G1 Z10 F3000
    G90
    # Disable steppers
    M84

[gcode_macro MOVE_UP]
description: I stole this from the internet.
gcode:
	SAVE_GCODE_STATE NAME=my_move_up_state
	# enable relative positioning
	G91
	G1 Z10 F300
	RESTORE_GCODE_STATE NAME=my_move_up_state

[gcode_macro LIST_HEATER_KEYS]
description:
	(WIP) Display the keys on pheaters object, if it exists
gcode:
	{% set _KEYS=printer['heaters'] | list | join(', ')  %}
	{action_respond_info(
		'heaters : ' + _KEYS)}
	{% set _KEYS=printer['heaters'].available_heaters | list | join(', ')  %}
	{action_respond_info(
		'printer[heaters].available_heaters : ' + _KEYS)}

	{% set HEATERS=printer['heaters'].available_heaters %}
	{action_respond_info(
		'HEATERS : ' + HEATERS | string )}

	{action_respond_info("HEATERS...")}
	{% if HEATERS is string %}
	{% elif HEATERS is iterable %}
	{action_respond_info("is an iterable")}
	{% else %}
	{action_respond_info("is god knows what.")}
	{% endif %}

	{% set _KEYS=HEATERS %}
	{action_respond_info(
		'available_heaters extruder : ' + ' ')}
	{action_respond_info(
		HEATERS[0].__dict__ 
	)}

[gcode_macro LIST_PRINTER_PRINTER_KEYS]
description:
	(WIP) Display the keys on printer.printer
gcode:
	{% set _KEYS=printer.printer.__dict__ | list | join(', ')  %}
	{action_respond_info(
		'printer.printer dict: ' + _KEYS)}

[gcode_macro WHERE_EXTRUDER]
description:
	(WIP) find the heaters PID
gcode:
	{% set _KEYS=printer['extruder'] %}
	{action_respond_info(
		'extruder is : ' + printer['extruder'] | string )}
	{% set _KEYS=printer['extruder'] | list | join(', ')  %}
	{action_respond_info(
		'heater_bed : ' + printer['heater_bed'] | string )}

	{% set HEATERS=printer['heaters'].available_heaters %}
	{action_respond_info(
		'HEATERS : ' + HEATERS | string )}

#	{action_respond_info("HEATERS...")}
#	{% if HEATERS is string %}
#	{% elif HEATERS is iterable %}
#	{action_respond_info("is an iterable")}
#	{% else %}
#	{action_respond_info("is god knows what.")}
#	{% endif %}

    # printer['heaters'].keys() = ['available_sensors', 'available_monitors', 'available_heaters']
	{action_respond_info(
        '[\'heaters\'][\'available_sensors\']:' +
		printer['heaters']['available_sensors'] | string
	)}

    # printer['heaters'].keys() = ['available_sensors', 'available_monitors', 'available_heaters']
	{action_respond_info(
        '[\'heaters\'][\'available_monitors\'] :' +
		printer['heaters']['available_monitors'] | string
	)}


    {action_respond_info(
        'blah' + time
    )}